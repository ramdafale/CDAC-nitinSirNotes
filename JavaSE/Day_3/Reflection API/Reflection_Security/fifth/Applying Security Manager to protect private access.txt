package core1;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

class Sample
{
	public Sample()
	{
		System.setSecurityManager(new SecurityManager());
	}
	private int num1=200;
	public int num2=400;
	private void disp1()
	{
		System.out.println("in disp1");
	}
	public void disp2()
	{
		System.out.println("in disp2");
	}
	public int getNum1()
	{
		return num1;
	}
}
public class one
{
		public static void main(String args[])
		{
			try
			{
				Class c=Class.forName("core1.Sample");
				
				Method m=c.getMethod("disp2",null);
				
				Sample s=new Sample();

				System.out.println("Invoking public method");

				m.invoke(s,null);
				
				System.out.println("Now invoke public field");
				
				System.out.println("Before modifying public field\t"+s.num2);
				
				Field value = c.getDeclaredField("num2");
			      
			    value.set(s,1000);
			    
			    System.out.println("After modifying public field\t"+s.num2);

				
				Method m1=c.getDeclaredMethod("disp1",null);
			
				
				m.setAccessible(true); // this is must for invoking private method

				System.out.println("trying to invoke private method");
				m.invoke(s,null);
				
				System.out.println("Before modifying private field\t"+s.getNum1());
				
				Field value1 = c.getDeclaredField("num1");
			      
				value.setAccessible(true);
			    value.set(s,120);
			    
			    System.out.println("After modifying private field\t"+s.getNum1());

				
			}
			catch(Exception ee)
			{
				System.out.println(ee);
			}
		}
}


output:

Invoking public method

in disp2

Now invoke public field

Before modifying public field	400

After modifying public field	1000

java.security.AccessControlException: access denied ("java.lang.reflect.ReflectPermission" "suppressAccessChecks")
