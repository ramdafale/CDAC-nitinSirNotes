/*
successful output:

writing is over

10

*/

/*
it is because, this time we have static nested class and static nested classes are having by default no-arg constructor available. The reason for this is since static nested class is not given any implicit reference of Outer class, there is no parameterized constructor added by compiler. It has implicitly provided public no-arg constructor only. The only thing we must ensure is inner class must be "public" and having public no-arg constructor.

*/

package core1;

import java.io.Externalizable;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.Serializable;

class Outer 
{
	public static class inner implements Externalizable
	{
		int num=10;
		
		@Override
		public void writeExternal(ObjectOutput out) throws IOException {
			// TODO Auto-generated method stub
			out.writeInt(num);
			
		}

		@Override
		public void readExternal(ObjectInput in) throws IOException,
				ClassNotFoundException {
			// TODO Auto-generated method stub 
			int k=in.readInt();
			
		}
	}
}
public class MyClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Outer o=new Outer();
		Outer.inner i=new Outer.inner();
		Outer.inner ref=null;
		
		try
		{
		FileOutputStream fos=new FileOutputStream("d:\\try.txt");
		ObjectOutputStream oos=new ObjectOutputStream(fos);
		oos.writeObject(i);
		System.out.println("writing is over");
		FileInputStream fis=new FileInputStream("d:\\try.txt");
		ObjectInputStream ois=new ObjectInputStream(fis);
		ref=(Outer.inner)ois.readObject();
		}
		catch(IOException ie)
		{
			ie.printStackTrace();
		}
		catch(ClassNotFoundException cnfe)
		{
			cnfe.printStackTrace();
		}
		System.out.println(ref.num);

	}

}
